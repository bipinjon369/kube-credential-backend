service: kube-credential-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}

custom:
  accountId: ${aws:accountId}
  region: ${self:provider.region}
  stage: ${self:provider.stage}

resources:
  Resources:
    # DB Parameter Group to allow non-SSL connections
    DBParameterGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: Parameter group for PostgreSQL to allow non-SSL connections
        Family: postgres15
        Parameters:
          rds.force_ssl: 0

    # RDS PostgreSQL Instance
    PostgreSQLDB:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: ${self:service}-${self:custom.stage}-postgres
        DBInstanceClass: db.t3.micro
        Engine: postgres
        EngineVersion: '15'
        MasterUsername: dbadmin
        MasterUserPassword: ${opt:db-password, 'SimplePass123'}
        AllocatedStorage: 20
        StorageType: gp2
        DBName: kube_credentials
        DBParameterGroupName: !Ref DBParameterGroup
        VPCSecurityGroups:
          - !Ref RDSSecurityGroup
        DBSubnetGroupName: !Ref DBSubnetGroup
        PubliclyAccessible: true
        BackupRetentionPeriod: 7
        MultiAZ: false
        StorageEncrypted: true
        DeletionProtection: false

    # RDS Security Group
    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS PostgreSQL
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: !Ref ECSSecurityGroup
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0

    # DB Subnet Group
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for RDS database
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

    # VPC and Networking
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: ${self:provider.region}a
        MapPublicIpOnLaunch: true

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: ${self:provider.region}b
        MapPublicIpOnLaunch: true

    InternetGateway:
      Type: AWS::EC2::InternetGateway

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC

    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnetRouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    # Security Groups
    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Application Load Balancer
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0

    ECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for ECS services
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            SourceSecurityGroupId: !Ref ALBSecurityGroup

    # Application Load Balancer
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${self:service}-alb
        Scheme: internet-facing
        Type: application
        SecurityGroups:
          - !Ref ALBSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

    # Target Groups
    IssuanceTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${self:service}-is-tg
        Port: 3000
        Protocol: HTTP
        VpcId: !Ref VPC
        TargetType: ip
        HealthCheckPath: /health
        HealthCheckProtocol: HTTP
        HealthCheckIntervalSeconds: 30
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3

    VerificationTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${self:service}-verif-tg
        Port: 3000
        Protocol: HTTP
        VpcId: !Ref VPC
        TargetType: ip
        HealthCheckPath: /health
        HealthCheckProtocol: HTTP
        HealthCheckIntervalSeconds: 30
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3

    # ALB Listener
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: fixed-response
            FixedResponseConfig:
              StatusCode: 404
              ContentType: text/plain
              MessageBody: Not Found
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP

    # Listener Rules
    IssuanceListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref IssuanceTargetGroup
        Conditions:
          - Field: path-pattern
            Values:
              - /issuance/*
              - /health
        ListenerArn: !Ref ALBListener
        Priority: 1

    VerificationListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref VerificationTargetGroup
        Conditions:
          - Field: path-pattern
            Values:
              - /verification/*
        ListenerArn: !Ref ALBListener
        Priority: 2

    # ECS Cluster
    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${self:service}-cluster
        CapacityProviders:
          - FARGATE
        DefaultCapacityProviderStrategy:
          - CapacityProvider: FARGATE
            Weight: 1

    # ECS Task Execution Role
    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    # ECS Task Role
    ECSTaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole

    # CloudWatch Log Groups
    IssuanceLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /ecs/${self:service}-issuance
        RetentionInDays: 7

    VerificationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /ecs/${self:service}-verification
        RetentionInDays: 7

    # Issuance Service Task Definition
    IssuanceTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: ${self:service}-issuance
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        Cpu: 256
        Memory: 512
        ExecutionRoleArn: !Ref ECSTaskExecutionRole
        TaskRoleArn: !Ref ECSTaskRole
        ContainerDefinitions:
          - Name: issuance-service
            Image: ${self:custom.accountId}.dkr.ecr.${self:custom.region}.amazonaws.com/issuance-service:latest
            PortMappings:
              - ContainerPort: 3000
                Protocol: tcp
            Environment:
              - Name: NODE_ENV
                Value: production
              - Name: PORT
                Value: "3000"
              - Name: AWS_REGION
                Value: ${self:custom.region}
              - Name: DB_NAME
                Value: kube_credentials
              - Name: DB_PORT
                Value: "5432"
              - Name: RDS_CLUSTER_HOST
                Value: !GetAtt PostgreSQLDB.Endpoint.Address
              - Name: RDS_CLUSTER_USERNAME
                Value: dbadmin
              - Name: RDS_CLUSTER_PASSWORD
                Value: ${opt:db-password, 'SimplePass123'}
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref IssuanceLogGroup
                awslogs-region: ${self:custom.region}
                awslogs-stream-prefix: ecs

    # Verification Service Task Definition
    VerificationTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: ${self:service}-verification
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        Cpu: 256
        Memory: 512
        ExecutionRoleArn: !Ref ECSTaskExecutionRole
        TaskRoleArn: !Ref ECSTaskRole
        ContainerDefinitions:
          - Name: verification-service
            Image: ${self:custom.accountId}.dkr.ecr.${self:custom.region}.amazonaws.com/verification-service:latest
            PortMappings:
              - ContainerPort: 3000
                Protocol: tcp
            Environment:
              - Name: NODE_ENV
                Value: production
              - Name: PORT
                Value: "3000"
              - Name: AWS_REGION
                Value: ${self:custom.region}
              - Name: DB_NAME
                Value: kube_credentials
              - Name: DB_PORT
                Value: "5432"
              - Name: RDS_CLUSTER_HOST
                Value: !GetAtt PostgreSQLDB.Endpoint.Address
              - Name: RDS_CLUSTER_USERNAME
                Value: dbadmin
              - Name: RDS_CLUSTER_PASSWORD
                Value: ${opt:db-password, 'SimplePass123'}
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref VerificationLogGroup
                awslogs-region: ${self:custom.region}
                awslogs-stream-prefix: ecs

    # ECS Services
    IssuanceService:
      Type: AWS::ECS::Service
      DependsOn: IssuanceListenerRule
      Properties:
        ServiceName: ${self:service}-issuance
        Cluster: !Ref ECSCluster
        TaskDefinition: !Ref IssuanceTaskDefinition
        LaunchType: FARGATE
        DesiredCount: 1
        LoadBalancers:
          - ContainerName: issuance-service
            ContainerPort: 3000
            TargetGroupArn: !Ref IssuanceTargetGroup
        NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              - !Ref ECSSecurityGroup
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            AssignPublicIp: ENABLED

    VerificationService:
      Type: AWS::ECS::Service
      DependsOn: VerificationListenerRule
      Properties:
        ServiceName: ${self:service}-verification
        Cluster: !Ref ECSCluster
        TaskDefinition: !Ref VerificationTaskDefinition
        LaunchType: FARGATE
        DesiredCount: 1
        LoadBalancers:
          - ContainerName: verification-service
            ContainerPort: 3000
            TargetGroupArn: !Ref VerificationTargetGroup
        NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              - !Ref ECSSecurityGroup
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            AssignPublicIp: ENABLED

  Outputs:
    LoadBalancerDNS:
      Description: Application Load Balancer DNS Name
      Value: !GetAtt ApplicationLoadBalancer.DNSName

    IssuanceECRRepository:
      Description: Issuance Service ECR Repository URI
      Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/issuance-service"

    VerificationECRRepository:
      Description: Verification Service ECR Repository URI
      Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/verification-service"

    ECSCluster:
      Description: ECS Cluster Name
      Value: !Ref ECSCluster

    VPCId:
      Description: VPC ID
      Value: !Ref VPC

    RDSEndpoint:
      Description: RDS PostgreSQL Endpoint
      Value: !GetAtt PostgreSQLDB.Endpoint.Address

    DatabaseName:
      Description: Database Name
      Value: kube_credentials

    IssuanceServiceName:
      Description: Issuance ECS Service Name
      Value: !Ref IssuanceService

    VerificationServiceName:
      Description: Verification ECS Service Name
      Value: !Ref VerificationService